---
title: Guia de estilo

menu_page: sidebar-guia-estilo.erb
---

<article class="text">
  
  <header>
    <h1>Guia de estilo</h1>
    <h3>Padrões de código & melhores práticas em Javascript</h3>
  </header>
  
  <p>
    Este guia de estilo mostra o padrão e algumas boas práticas seguidas no código do LocawebStyle que podem er mantidas nos seus projetos.
  </p>
  <p>
    As principais vantagens de manter o padrão são:
  </p>
  <ol>
    <li>
      consistência de código
    </li>
    <li>
      melhores práticas
    </li>
  </ol>
  <p>
    Mantendo a consistência de pattern, estilos de código e boas práticas, fica cada vez mais simples manter código legado, atualizar projetos e inserir novas funcionalidades. A idéia é que o código mantenha unidade, escrito por uma pessoa ou por várias, dentro de um projeto e entre projetos diferentes, diminuindo o tempo de aprendizado.
  </p>
  <p>
    As regras a seguir propoem um padrão mímimo para desenvolvimento e não são obrigatórias. O mais importante é manter a consistência de estilo de código. O que for escolhido como estilo para o seu projeto deverá ser seguido em todos os arquivos.
  </p>

  <h2>
    Diretrizes gerais
  </h2>

  <p>
    Antes de mostrar o código, pattern, usado no LocawebStyle, é bom entender alguns princípios e convenções adotadas.
  </p>

  <h3>
    Padrões de escrita
  </h3>

  <p>
    <b>
      Espaços em branco:
    </b>
    utilizamos 2 espaços, mas o mais importante é seguir um estilo único. Nunca misture espaços e tabs em único arquivo. Para facilitar incluímos no projeto um arquivo de configuraçao de editores, o ".editorconfig", saiba mais sobre ele em 
    <a href="http://editorconfig.org/" target="_blank">
      editorconfig.org
    </a>
  </p>

  <p>
    <b>
      Sintaxe:
    </b> 
    para separaçao dos blocos de código, utilizamos o estilo 
    <a href="http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS" target="_blank">
      1TBS
    </a>. 
    Exemplo:
    <pre class="lang-javascript prettyprint linenums">
    if ( x < 0 ) {
      console.dir( x )
    } else {
      console.dir( y )
    }
    </pre>
    <small>
      Observe os alinhamentos, quebras de linhas, posição das chaves e espaços entre variáveis e operadores.
    </small>
  </p>

  <!-- 
    'use strict';
    escolha de plugins
    internacionalizaçao (plugin/semplugin/gem)
    nomenclatura de arquivos
    Código em apenas um idioma
    separaçao mvc 
    aspas simples em evz de duplas
    declaraçao de variaveis no inicio
    final de linahs vazias (editorconfig)
    nomenclatura
    this / _self / bind / apply / call / $name
    switch nao
    sem medo de ifs aninhados
    Retornos antecipados 
    retornos apenas com utilidade
    chaining
    
    Notações literais:
      var array = [],
        object = {};
    
    apenas um `var` por escopo
    var foo = "",
      bar = "",
      quux;
    
    // Expressão de função
    var square = function( number ) {
      // Retorna algo de valor e relevante
      return number * number;
    };

    closures

    refs
      idiomatic.js
      http://contribute.jquery.org/style-guide/js/
   -->

   <h3>
     Revealing Module Pattern
   </h3>
  <p>
    Para melhorar a organização dos arquivos, funções, performance e diminuir a chance de erros e conflitos, utilizamos o pattern 
    <i>
      Revealing Module
    </i>
    do
    <a href="http://christianheilmann.com/" target="_blank">Christian Heilmann</a>.
  </p>
  <p>
    As vantagens desse pattern são: organização, clareza, performance, expõe publicamente apenas as funções e variáveis que se deseja, namespace único evitando sobrescrever métodos facilmente.
  </p>  
  <p>
    Leia mais sobre ele no livro do 
    <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Addy Osmani</a>.
  </p>
  <p>
    Um exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // define o objeto global do projeto, igual a já existente ou cria um novo objeto
  var projeto = projeto || {};
  // define o modulo no objeto global
  projeto.modulo = (function() {
    'use strict';

    function init() {
      // ...
    }

    function update() {
      // ...
    }

    function internal() {
      // ...
    }

    return {
      start:init,
      update: update
    };

  }());
  </pre>

  <p>
    O ideal é ter um módulo por arquivo, e que eles nao se iniciem sozinhos. Então um módulo central que funcione como controlador de quais serão executados é uma boa prática.
  </p>

  <p>Exemplo:</p>
  
  <p>
    Módulo de gráficos no arquivo graficos.js
  </p>
  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.charts = (function() {
    'use strict';

    function init() {
      plotChart();
    }

    function plotChart() {
      // ...
    }

    return {
      init:init
    };

  }());
  </pre>
  
  <p>
    Módulo servidores no arquivo servers.js
  </p>
  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.servers = (function() {
    'use strict';

    function init() {
      loadAllServers();
    }

    function loadAllServers() {
      // ...
    }

    return {
      init:init
    };

  }());
  </pre>

  <p>
    e finalmente o arquivo que controla quando cada módulo será executado, da maneira que preferir:
    Arquivo router.js
  </p>

  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.router = (function($) {
    'use strict';

    function init() {

      if ( $('.chart').size() ) {
        projeto.charts.init();
      }

      if ( window.location.pathname === '/servers' ) {
        projeto.servers.init();
      }
      
    }

    return {
      init:init
    };

  }(jQuery));

  projeto.router.init();
  </pre>


  <h3>
    Boas práticas
  </h3>

  <p>
    Exemplos em jQuery
  </p>
  
  <h4>
    Seja compreensível
  </h4>
  <p>
    Use nomes de variáveis e funções auto explicativos e simples. Crie algum padrão e mantenha em todo o projeto. Exemplos:
  </p>
  <p>
    Variáveis com nomes ruins:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // curtos, posicionamento no código e abreviações
  var x1;
  var input1;
  var posLT;

  // longos demais
  var valorEixoXGraficoConsumo;
  var inputTextFirstName;
  </pre>
  <p>
    Funções com nomes ruins:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // nomes que descrevem o código, nao o objetivo da função
  function maiorDeDezoitoAnos(idade){
    return idade >= 18;
  }
  // é melhor descrever o objetivo
  function possuiMaioridade(idade){
    return idade >= 18;
  }
  </pre>
  <p>
    É uma boa ideia criar um padrão para suas variáveis e funções, como por exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // variáveis com $ no início são elementos/objetos jQuery
  var $header    = $('#header');
  var $menuItens = $('#menu a');

  // maiúsculas para constantes
  var IMAGES_PATH = '/assets/images/';
  var CLIENT_NAME = 'Fulan0';

  // _ no início para variáveis e funções privadas
  var _count = 0;
  </pre>
  <p>
    Confira o padrão de nomenclatura do 
    <a href="http://javascript.crockford.com/code.html#names" target="_blank">
      Douglas Crockford
    </a>
  </p>

  <h4>
    Evite Globais
  </h4>
  <p>
    No geral é uma péssima idéia, porque aumenta a chance de ter algo sobrescrito. 
    Uma opçao é utilizar 
    <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures" target="_blank">closures</a> 
    e 
    <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript" target="_blank">module pattern</a>
  </p>

  <h4>
    Seja consistente no estilo de código
  </h4>
  <p>
    É possível  escrever seu código de muitas maneiras, mas procure manter o mesmo estilo em todo seu projeto, mantendo um padrão nos nomes, identacões, patterns, etc.
  </p>
  <p>
    Uma dica, utilize o 
    <a href="http://www.jslint.com/" target="_blank">jslint</a> 
    para validar seu código.
  </p>

  <h4>
    Escreva os comentários necessários
  </h4>
  <p>
    É comum ouvir "Um bom código não precisa de explicação". Mas na prática em projetos maiores, procure explicar a finalidade do seu código.
    Muitas pessoas, de diferentes níveis, podem ter que trabalhar no seu código e nem sempre elas tem experiencia, tempo ou conhecimento do negócio para entender tudo.
    Facilite o desenvolvimento e manutenção comentando, mas não explicando o que ele faz, mas qual a regra de negócio. Exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // ruim: verifica se é maior de 18
  // bom: menores de idade sao redirecionados
  if( age >= 18 ){ ... }
  </pre>
  <p>
    Lembrando que cometários devem existir apenas na versão de desenvolvimento, devendo ser removidos no arquivo minificado que é entregue em produção.
  </p>

  <h4>
    Evite misturar tecnologias
  </h4>
  <p>
    Na prática do dia a dia, algo bem simples: estilize seu HTML com CSS, nao com JS. Exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // Errado
  $('.user-name').css({
    'border'  : '1px solid red',
    'color'   : 'red'
  });
  // Certo
  $('.user-name.error').addClass('error');
  </pre>
  <p>
    Crie os estilos que precisar (e animações, quando possível) no CSS, e no javascript controle quando os estilos são aplicados, em vez de aplicar propriedades.
  </p>

  <h4>
    Use sintaxe abreviada
  </h4>
  <p>
    Conheça as notações de variáveis e funções abreviadas e procure usá-las. Exemplos:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // Use
  var cores = ['rosa', 'azul', 'verde'];
  // em vez de
  var cores = new Array();
  lunch[0]='rosa';
  lunch[1]='azul';
  lunch[2]='verde';

  // Use
  var x = v || 10;
  // em vez de 
  if(v){
     var x = v;
  } else {
     var x =10;
  }

  // Use
  var direcao = (x > 100) ? 1 : -1;
  // em vez de 
  var direcao;
  if(x > 100){
     direcao = 1;
  } else {
     direcao = -1;
  }
  </pre>

  <h4>
    Modularize seu código
  </h4>
  <p>
    Evite escrever funções, trechos de código muito longos, ou aninhados. Procure separar regras e evite códigos repetidos.
    Exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // Em vez de 
  $('#botao1').on('click', function(){
    $('#resultado').load('ajax/lista-pessoas.html', function() {
      $('#formulario').slideUp()
    });
  })
  $('#botao2').on('click', function(){
    $('#resultado').load('ajax/lista-empresas.html', function() {
      $('#formulario').slideUp()
    });
  })
  //...

  // Faça
  function hideForm(){
      $('#formulario').slideUp();
  }
  $('#botao1').on('click', function(){
    $('#resultado').load('ajax/lista-pessoas.html', function() {
      hideForm();
    });
  })
  $('#botao2').on('click', function(){
    $('#resultado').load('ajax/lista-empresas.html', function() {
      hideForm();
    });
  })

  // Ou melhor
  function hideForm(){
    $('#formulario').slideUp();
  }
  function carregaDados( elemento, url){
    $(elemento).on('click', function(){
      $('#resultado').load(url, function() {
        hideForm();
      });
    })  
  }
  carregaDados('#botao1', 'ajax/lista-pessoas.html');
  carregaDados('#botao2', 'ajax/lista-empresas.html');
  </pre>

  <h4>
    Configurações e internacionalização
  </h4>
  <p>
    Quando estiver criando a aplicaçao, pense em cada valor, texto, variável, se é o caso de deixá-la separada, permitindo alterá-la depois. Exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // Em vez de
  $.ajax({
    type: "POST",
    url: "api/usuarios",
    data: {limit: 10},
    success: function(data){
      $('#formulario').hide();
      $('#mensagem').text('Busca efetuada com sucesso');
      $('#lista').html(data).fadeIn('fast');
    },
    error: function(){
      $('#mensagem').text('Erro na busca');
    }
  });

// Faça
var config: {
  messages = {
    success: 'Busca efetuada com sucesso',
    error: 'Erro na busca'
  },
  api: {
    usuarios: "api/usuarios"
  },
  animate: {
    velocity: "fast"
  },
  list: {
    perPage: 10
  }
}
//...
$.ajax({
  type: "POST",
  url: config.api.usuarios,
  data: {limit: config.list.perPage},
  success: function(data){
    $('#formulario').hide();
    $('#mensagem').text(config.messages.success);
    $('#lista').html(data).fadeIn(config.animate.velocity);
  },
  error: function(){
    $('#mensagem').text(config.messages.success);
  }
});
  </pre>

  <h4>
    Evite muitos aninhamentos
  </h4>
  <p>
    Facilite o entendimento e manutençao dos seus códigos. Utilize as práticas anteriores e evite um código do tipo: 
  </p>
  <pre class="lang-javascript prettyprint linenums">
  $('#botao').on('click', function(){
  $.ajax({
    type: "POST",
    url: 'usuarios',
    success: function(data){
      $('resultado').fadeIn('fast', function(){
        $('#formulario').animate({
          heigth: 0, 
          opacity: 0
        }, 300, function(){
            $('#mensagem').animate({
              heigth: 200,
              opacity: 1
            }, 300, function(){
              //etc etc
            })
          }
        )
      })
    },
    error: function(){
      $('#mensagem').text(config.messages.success);
    }
  });
});
  </pre>


</article>