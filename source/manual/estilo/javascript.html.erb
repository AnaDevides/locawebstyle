---
title: Guia de estilo

menu_page: sidebar-guia-estilo.erb
---

<article class="text">
  
  <header>
    <h1>Guia de estilo</h1>
    <h3>Padrões de código & melhores práticas em Javascript</h3>
  </header>
  
  <p>
    Este guia de estilo mostra o padrão e algumas boas práticas seguidas no código do LocawebStyle que podem er mantidas nos seus projetos.
  </p>
  <p>
    As principais vantagens de manter o padrão são:
  </p>
  <ol>
    <li>
      consistência de código
    </li>
    <li>
      melhores práticas
    </li>
  </ol>
  <p>
    Mantendo a consistência de pattern, estilos de código e boas práticas, fica cada vez mais simples manter código legado, atualizar projetos e inserir novas funcionalidades. A idéia é que o código mantenha unidade, escrito por uma pessoa ou por várias, dentro de um projeto e entre projetos diferentes, diminuindo o tempo de aprendizado.
  </p>
  <p>
    As regras a seguir propoem um padrão mímimo para desenvolvimento e não são obrigatórias. O mais importante é manter a consistência de estilo de código. O que for escolhido como estilo para o seu projeto deverá ser seguido em todos os arquivos.
  </p>

  <h2>
    Diretrizes gerais
  </h2>

  <p>
    Antes de mostrar o código, pattern, usado no LocawebStyle, é bom entender alguns princípios e convenções adotadas.
  </p>

  <h3>
    Padrões de escrita
  </h3>

  <p>
    <b>
      Espaços em branco:
    </b>
    utilizamos 2 espaços, mas o mais importante é seguir um estilo único. Nunca misture espaços e tabs em único arquivo. Para facilitar incluímos no projeto um arquivo de configuraçao de editores, o ".editorconfig", saiba mais sobre ele em 
    <a href="http://editorconfig.org/" target="_blank">
      editorconfig.org
    </a>
  </p>

  <p>
    <b>
      Sintaxe:
    </b> 
    para separaçao dos blocos de código, utilizamos o estilo 
    <a href="http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS" target="_blank">
      1TBS
    </a>. 
    Exemplo:
    <pre class="lang-javascript prettyprint linenums">
    if ( x < 0 ) {
      console.dir( x )
    } else {
      console.dir( y )
    }
    </pre>
    <small>
      Observe os alinhamentos, quebras de linhas, posição das chaves e espaços entre variáveis e operadores.
    </small>
  </p>

  <!-- 
    'use strict';
    nomenclatura de arquivos
    Código em apenas um idioma
    separaçao mvc 
    aspas simples em evz de duplas
    declaraçao de variaveis no inicio
    final de linahs vazias (editorconfig)
    nomenclatura
    this / _self / bind / apply / call / $name
    switch nao
    sem medo de ifs aninhados
    Retornos antecipados 
    retornos apenas com utilidade
    chaining
    
    Notações literais:
      var array = [],
        object = {};
    
    apenas um `var` por escopo
    var foo = "",
      bar = "",
      quux;
    
    // Expressão de função
    var square = function( number ) {
      // Retorna algo de valor e relevante
      return number * number;
    };

    closures

    refs
      idiomatic.js
      http://contribute.jquery.org/style-guide/js/
   -->

   <h3>
     Revealing Module Pattern
   </h3>
  <p>
    Para melhorar a organização dos arquivos, funções, performance e diminuir a chance de erros e conflitos, utilizamos o pattern 
    <i>
      Revealing Module
    </i>
    do
    <a href="http://christianheilmann.com/" target="_blank">Christian Heilmann</a>.
  </p>
  <p>
    As vantagens desse pattern são: organização, clareza, performance, expõe publicamente apenas as funções e variáveis que se deseja, namespace único evitando sobrescrever métodos facilmente.
  </p>  
  <p>
    Leia mais sobre ele no livro do 
    <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Addy Osmani</a>.
  </p>
  <p>
    Um exemplo:
  </p>
  <pre class="lang-javascript prettyprint linenums">
  // define o objeto global do projeto, igual a já existente ou cria um novo objeto
  var projeto = projeto || {};
  // define o modulo no objeto global
  projeto.modulo = (function() {
    'use strict';

    function init() {
      // ...
    }

    function update() {
      // ...
    }

    function internal() {
      // ...
    }

    return {
      start:init,
      update: update
    };

  }());
  </pre>

  <p>
    O ideal é ter um módulo por arquivo, e que eles nao se iniciem sozinhos. Então um módulo central que funcione como controlador de quais serão executados é uma boa prática.
  </p>

  <p>Exemplo:</p>
  
  <p>
    Módulo de gráficos no arquivo graficos.js
  </p>
  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.charts = (function() {
    'use strict';

    function init() {
      plotChart();
    }

    function plotChart() {
      // ...
    }

    return {
      init:init
    };

  }());
  </pre>
  
  <p>
    Módulo servidores no arquivo servers.js
  </p>
  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.servers = (function() {
    'use strict';

    function init() {
      loadAllServers();
    }

    function loadAllServers() {
      // ...
    }

    return {
      init:init
    };

  }());
  </pre>

  <p>
    e finalmente o arquivo que controla quando cada módulo será executado, da maneira que preferir:
    Arquivo router.js
  </p>

  <pre class="lang-javascript prettyprint linenums">
  var projeto = projeto || {};
  projeto.router = (function($) {
    'use strict';

    function init() {

      if ( $('.chart').size() ) {
        projeto.charts.init();
      }

      if ( window.location.pathname === '/servers' ) {
        projeto.servers.init();
      }
      
    }

    return {
      init:init
    };

  }(jQuery));

  projeto.router.init();
  </pre>



</article>